////////////////////////////////////////////////////////////////////////
//
// DataTypeValidatorString.java
//
// This file was generated by MapForce 2007sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

public class  DataTypeValidatorString extends DataTypeValidator {

	public DataTypeValidatorString (int minLength, int maxLength) {
		super (minLength, maxLength);
	}

	public boolean makeValidOnRead (StringBuffer s, Parser.Context context) {
		// TODO

		int effLen = effectiveLength(s, context.getScanner().getServiceChars().getReleaseCharacter());
		 if (effLen > getMaxLength() || effLen < getMinLength())
			 context.handleError(Parser.FieldLength);

		return true;
	}

	public boolean makeValidOnWrite (StringBuffer s, Writer writer) {
		escape(s, writer.getServiceChars());

		int toPad = getMinLength() - effectiveLength(s, writer.getServiceChars().getReleaseCharacter());

		if (toPad >0)
		{
			String spad = new String();
			for (int i=0; i< toPad; ++i)
				spad += ' ';
			s.append(spad);
		}

		return true;
	}

	int effectiveLength(StringBuffer s, char escape)
	{
		int len = s.length();
		if (escape == '\0')
			return len;

		for (int i=0; i< s.length(); ++i)
			if (s.charAt(i) == escape)
				len--;
		return len;
	}

	void escape(StringBuffer s, ServiceChars sc)
	{

		char escapeChar = sc.getReleaseCharacter();

		 char toBeEscaped[] = {
				 sc.getComponentSeparator(),
				 sc.getDataElementSeparator(),
				 sc.getRepetitionSeparator(),
				 sc.getSegmentTerminator(),
				 escapeChar
		};

		for (int i=0; i< s.length(); ++i)
			for (int j=0; j<toBeEscaped.length; ++j)
				if (toBeEscaped[j] != '\0' && toBeEscaped[j] != ' ' && s.charAt(i) == toBeEscaped[j])
					if (escapeChar != '\0')
						s.insert(i++, escapeChar);
					else
						s.setCharAt(i, ' ');
	}
}
