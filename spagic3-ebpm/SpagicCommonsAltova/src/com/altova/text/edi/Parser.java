////////////////////////////////////////////////////////////////////////
//
// Parser.java
//
// This file was generated by MapForce 2007sp1.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

package com.altova.text.edi;

import com.altova.text.Generator;

public class Parser {

	byte mErrorMask = (byte) 0;  // 255;

	public static final byte MissingSegmentOrGroup = 0;
	public static final byte MissingFieldOrComposite = 1;
	public static final byte ExtraData = 2;
	public static final byte FieldValueInvalid = 3;
	public static final byte ExtraRepeat = 4;
	public static final byte NumericOverflow = 5;
	public static final byte FieldLength = 6;
	public static final byte UnexpectedEndOfFile = 7;

	public static final String ErrorMessages[] = {
		"Missing segment or group",
		"Missing field or composite",
		"Extra data",
		"Field value invalid",
		"Extra repeat",
		"Numeric overflow",
		"Field length",
		"Unexpected end of file"
};

	public class Context {
		Particle mParticle;
		Parser mParser;
		Scanner mScanner;
		Generator mGenerator;
		Context mParent = null;

		public Particle getParticle() {
			return mParticle;
		}

		public Parser getParser() {
			return mParser;
		}

		public Scanner getScanner() {
			return mScanner;
		}

		public Generator getGenerator() {
			return mGenerator;
		}

		public Context getParent() {
			return mParent;
		}

		public Context (Parser parser, Scanner scanner, Particle rootParticle, Generator generator) {
			this.mParticle = rootParticle;
			this.mParser = parser;
			this.mScanner = scanner;
			this.mGenerator = generator;
		}

		public Context (Context parent, Particle newParticle) {
			this.mParticle = newParticle;
			this.mParser = parent.mParser;
			this.mScanner = parent.mScanner;
			this.mGenerator = parent.mGenerator;
			this.mParent = parent;
		}

		public Parser.Context newContext(Parser.Context context, Particle particle) {
			return new Parser.Context(context, particle);
		}

		public void handleError (byte error) {

			String message = (error < 7)?Parser.ErrorMessages[error]:"Worst of all: bad error number";
			String location = mParticle.getNode().getName();
			Context parent = mParent;
			while (parent != null)
			{
				location = parent.getParticle().getNode().getName() + " / " + location;
				parent = parent.getParent();
			}

			if ((mParser.getErrorMask() & (1 << error)) != 0)
				throw new com.altova.AltovaException (location + ": " + message);
			else
				System.out.println("Warning: " + location + ": " + message);
		}
	}

	boolean mIgnoreMaxOccurs = true;

	public boolean getIgnoreMaxOccurs()  {
		return mIgnoreMaxOccurs;
	}

	public void setIgnoreMaxOccurs(boolean imo) {
		mIgnoreMaxOccurs = imo;
	}

	public byte getErrorMask() {
		return mErrorMask;
	}

	public void setErrorMask(byte err) {
		mErrorMask = err;
	}

	public boolean parse (Particle rootParticle, String buffer, Generator generator, ServiceChars serviceChars) {
		// TODO: create true clone
		ServiceChars sc = serviceChars;
		Scanner scanner = new Scanner(buffer, sc);
		Context rootContext = new Context (this, scanner, rootParticle, generator);
		return rootParticle.getNode().read(rootContext);
	}
}
